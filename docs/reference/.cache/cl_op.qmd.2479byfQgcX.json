{
    "cells": [
        {
            "id": "1",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "---\n",
                "engine: julia\n",
                "---\n",
                "\n",
                "# cl_op {#sec-doc}\n",
                "    \n",
                "\n",
                "::: {.callout-note appearance=\"simple\" title=\"docblock\" collapse=false}    \n",
                ""
            ]
        },
        {
            "id": "2",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| eval: false\n",
                "cl_op(lam, L0, op_dgp, cl_init, reps=10000; chart_choice, jmin=4, jmax=6, verbose=false, d=1, ced=false, ad=100)\n",
                ""
            ],
            "outputs": [
            ],
            "execution_count": 0
        },
        {
            "id": "3",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "Function to compute the control limit for ordinal patterns.\n",
                " \n",
                "  * `lam::Float64`: Smoothing parameter for the EWMA statistic.\n",
                "  * `L0::Float64`: In-control ARL.\n",
                "  * `op_dgp::Union{IC, AR1, MA1, MA2, TEAR1, AAR1, QAR1}`: DGP.\n",
                "  * `cl_init::Float64`: Initial guess for the control limit.\n",
                "  * `reps::Int64`: Number of replications.\n",
                "  * `chart_choice::Int` \n",
                "\n",
                "    1. $\\widehat{H}^{(d)}=-\\sum_{k=1}^{m!} \\hat{p}_k{ }^{(d)} \\ln \\hat{p}_k{ }^{(d)}$\n",
                "    2. $\\widehat{H}_{\\mathrm{ex}}^{(d)}=-\\sum_{k=1}^{m!}\\left(1-\\hat{p}_k{ }^{(d)}\\right) \\ln \\left(1-\\hat{p}_k{ }^{(d)}\\right)$\n",
                "    3. $\\widehat{\\Delta}^{(d)}=\\sum_{k=1}^{m!}\\left(\\hat{p}_k^{(d)}-1 / m!\\right)^2$\n",
                "    4. $\\hat{\\beta}^{(d)}=\\hat{p}_6^{(d)}-\\hat{p}_1^{(d)}$\n",
                "    5. $\\hat{\\tau}^{(d)}=\\hat{p}_6^{(d)}+\\hat{p}_1^{(d)}-\\frac{1}{3}$\n",
                "    6. $\\hat{\\delta}^{(d)}=\\hat{p}_4^{(d)}+\\hat{p}_5^{(d)}-\\hat{p}_3^{(d)}-\\hat{p}_2^{(d)}$\n",
                "\n",
                "    The patterns are categorized as follows:\n",
                "\n",
                "    $\\qquad p_1 = (3,2,1);  \\quad p_2=(3,1,2);  \\quad p_3 = (2,3,1);$\n",
                "\n",
                "    $\\qquad p_4 = (1,3,2);  \\quad p_5 = (2,1,3);  \\quad p_ 6 = (1,2,3)$\n",
                "  * `jmin::Int` Minimum number of decimals for final control limit to optimize.\n",
                "  * `jmax::Int` Maximum number of decimals for final control limit to optimize.\n",
                "  * `verbose::Bool=false` Print intermediate results?\n",
                "  * `d::Union{Int,Vector{Int}}=1`: Delay vector.\n",
                "  * `ced::Bool=false`: Use conditional expected delay? Default is false.\n",
                "  * `ad::Int=100`: Number of iterations for ced.\n",
                "\n",
                "\n",
                ":::\n",
                ""
            ]
        }
    ],
    "timestamp": "2025-10-19T15:30:01.739",
    "file": "/home/adaemmerp/Dropbox/Greifswald/Forschung/Mit_PWitten_CWeiss/StatsOP/docs/reference/cl_op.qmd",
    "qnr_schema_version": "1.0.0"
}